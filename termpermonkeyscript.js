// ==UserScript==
// @name        Immersion Kit Example Fetcher for Anki - Mobile Responsive with Random Words
// @namespace   Violentmonkey Scripts
// @match       https://ankiuser.net/study*
// @grant       GM_xmlhttpRequest
// @version     10.0
// @description Fetches Japanese example sentences from Immersion Kit with images and audio. Mobile-responsive with touch support.
// ==/UserScript==

(function() {
'use strict';

// =================================================================================
// CONFIGURATION
// =================================================================================

const RANDOM_WORDS = [
  "ボタンが",
  "取れる",
  "Uターン",
  "あくる",
  "あらゆる",
  "あれこれ",
  "いかに",
  "いける",
  "いずれ",
  "いっそ",
  "うっとり",
  "うんざり",
  "お世辞",
  "お互い",
  "お襁褓",
  "お買い得",
  "かえって",
  "かさかさ",
  "きっぱり",
  "くっきり",
  "ぐうぐう",
  "ぐっと",
  "ぐるぐる",
  "ぐんぐん",
  "こそこそ",
  "こつこつ",
  "ごちゃごちゃ",
  "ごろごろ",
  "ご無沙汰",
  "さっさと",
  "さっぱり",
  "さて",
  "さらさら",
  "しかし",
  "しかも",
  "しゃがむ",
  "しゃぶる",
  "しんと",
  "じかに",
  "すっと",
  "すると",
  "ずらりと",
  "せっせと",
  "せめて",
  "そうは言っても",
  "そこで",
  "その上",
  "それで",
  "それでは",
  "それでも",
  "それとも",
  "それなり",
  "それにしては",
  "そればかりか",
  "そわそわ",
  "ぞっと",
  "ただ",
  "ただし",
  "ただちに",
  "だらしない",
  "だらだら",
  "つまり",
  "つらい",
  "てきぱき",
  "てっきり",
  "というのも",
  "ところが",
  "ところで",
  "とっさ",
  "とても",
  "とにかく",
  "どうか",
  "どうしても",
  "どうせ",
  "どうにか",
  "どうやら",
  "どっと",
  "にやにや",
  "はきはき",
  "はらはら",
  "ばったり",
  "ばらす",
  "びしょびしょな",
  "ふくらむ",
  "ふらふら",
  "ふわふわ",
  "ぶかぶか",
  "ほぼ",
  "ぼうっと",
  "ぼろぼろ",
  "まごまご",
  "また",
  "または",
  "めっきり",
  "やむを得ず",
  "やや",
  "やり直す",
  "やる気",
  "ゆっくり",
  "ゆったり",
  "より",
  "わくわく",
  "アイドル",
  "アウトドア",
  "アクセス",
  "アピール",
  "アプローチ",
  "アポイント",
  "アンテナ",
  "アンテナを張る",
  "イベント",
  "インク",
  "インフレ",
  "ウエスト",
  "エコ",
  "エネルギー",
  "エントリー",
  "オフィス",
  "オークション",
  "オーケストラ",
  "オーダーメイド",
  "オーナー",
  "カップル",
  "カーソル",
  "ガムテープ",
  "ガードマン",
  "キャンパス",
  "キーボード",
  "グラウンド",
  "ケア",
  "コスト",
  "コマーシャル",
  "コメント",
  "コレクション",
  "サプリメント",
  "サポート",
  "サングラス",
  "システム",
  "シーズン",
  "スタイル",
  "ステップ",
  "ステージ",
  "スペース",
  "センス",
  "ダサい",
  "ダブる",
  "チラシ",
  "チラッと",
  "テロ",
  "テンポ",
  "ディスプレイ",
  "デモ",
  "トレイ",
  "トレーナー",
  "ニックネーム",
  "ニーズ",
  "ハードな",
  "バイキング",
  "パターン",
  "パック",
  "パンク",
  "ビジネス",
  "ファミレス",
  "フォント",
  "フリー",
  "フリーサイズ",
  "フルコース",
  "ブーム",
  "プライド",
  "プライバシー",
  "プラン",
  "プリンター",
  "プロジェクト",
  "プロポーズ",
  "ベテラン",
  "ペンネーム",
  "ホームヘルパー",
  "ボリューム",
  "ボート",
  "マイホーム",
  "マスコミ",
  "メディア",
  "モニター",
  "ユニーク",
  "ラッキー",
  "リストラ",
  "リズム",
  "リニューアル",
  "リハビリ",
  "リフレッシュ",
  "ルーズ",
  "レジャー",
  "レンズ",
  "レントゲン",
  "ロマン",
  "ローン",
  "ワクチン",
  "一人住まい",
  "一先ず",
  "一切",
  "一口",
  "一向に",
  "一変",
  "一家",
  "一層",
  "一度",
  "一戸建て",
  "一斉に",
  "一方",
  "一旦",
  "一時",
  "一段と",
  "一気に",
  "一生",
  "一瞬",
  "一致",
  "一般に",
  "万一",
  "上回る",
  "上手い",
  "上書き保存",
  "上等",
  "上達",
  "下町",
  "下線",
  "不可欠",
  "不問",
  "不平",
  "不明",
  "不正",
  "不用品",
  "不調",
  "不足",
  "世代",
  "世間",
  "世間知らず",
  "両立",
  "中世",
  "中断〈",
  "中継",
  "中身",
  "中途半端",
  "中間",
  "主に",
  "主人公",
  "主張",
  "主役",
  "主食",
  "久しい",
  "乏しい",
  "乗り",
  "乗り越える",
  "乱れる",
  "乱暴",
  "乳製品",
  "了承",
  "予め",
  "予期",
  "予測",
  "予防",
  "事実",
  "事情",
  "些細な",
  "交わす",
  "交替",
  "交渉",
  "人事",
  "人手",
  "人材",
  "人柄",
  "人物",
  "人生",
  "人目",
  "人見知り",
  "人通り",
  "人間",
  "今に",
  "今一つ",
  "今後",
  "今日",
  "今更",
  "介護",
  "仕方[が]ない",
  "仕舞った",
  "他人",
  "付近",
  "代表",
  "仲間外れ",
  "任せる",
  "休息",
  "休講",
  "休養",
  "会計",
  "伝染",
  "伝統",
  "伝言",
  "伝記",
  "伴う",
  "伸び伸び",
  "位置",
  "低下",
  "住宅",
  "住民",
  "体が持つ",
  "体力",
  "体調",
  "体験",
  "何かと",
  "何しろ",
  "何だか",
  "何だかんだ",
  "何とも（〜ない）",
  "何度も",
  "何故か",
  "何故なら",
  "何気ない",
  "余りに［も］",
  "余分",
  "余白",
  "余裕",
  "余計",
  "作品",
  "作成",
  "作業",
  "作法",
  "作物",
  "作用",
  "供給",
  "依存",
  "依頼",
  "価値",
  "価格",
  "侵入",
  "便秘",
  "俄か",
  "保留",
  "信頼",
  "修了",
  "修正",
  "俯く",
  "個人情報",
  "値引き",
  "偏る",
  "停止",
  "健やか",
  "備える",
  "催促",
  "傷付く",
  "傷跡",
  "傾く",
  "傾らか",
  "傾向",
  "僅か",
  "優秀な",
  "充実",
  "先ほど",
  "先進国",
  "克服",
  "免税店",
  "免許",
  "入れ替える",
  "入社",
  "公共",
  "公共料金",
  "公平",
  "共通",
  "其れにも拘わらず",
  "具体的に",
  "典型的",
  "内定",
  "再会",
  "再開",
  "冒険",
  "冷え込む",
  "冷ます",
  "冷める",
  "冷静",
  "凍える",
  "凝る",
  "凡そ",
  "処分",
  "処理",
  "凭れる",
  "凸凹",
  "出し入れ",
  "出世",
  "出来事",
  "出産",
  "出費",
  "分別",
  "分析",
  "分野",
  "分類",
  "切り取る",
  "切り替える",
  "初夏",
  "初対面",
  "初心者",
  "判断",
  "別に",
  "制度",
  "制限",
  "刺激",
  "削る",
  "前もって",
  "前向き",
  "剥がす",
  "副作用",
  "割と",
  "割合",
  "劇場",
  "加入",
  "加減",
  "加速",
  "努める",
  "励ます",
  "効率的",
  "勇ましい",
  "動機",
  "勘違い",
  "勝利",
  "勝敗",
  "勝負",
  "勢い",
  "包装",
  "区切る",
  "医師",
  "医療",
  "医者に掛かる",
  "千切る",
  "卑怯",
  "協調",
  "南向き",
  "単なる",
  "占い",
  "占める",
  "印刷",
  "危機",
  "厄介",
  "厚かましい",
  "去る",
  "参考",
  "参考書",
  "及ぶ",
  "及ぼす",
  "友人",
  "双子",
  "反らす",
  "反応",
  "反映",
  "反省",
  "反論",
  "反面",
  "収入",
  "収集",
  "取り上げる",
  "取り入れる",
  "取り寄せる",
  "取り引き",
  "取り戻す",
  "取り組む",
  "取り締まり",
  "取り除く",
  "取材",
  "受け入れる",
  "受け取る",
  "受け持つ",
  "受講",
  "口が上手い",
  "口が堅い",
  "口が悪い",
  "口が滑る",
  "口が軽い",
  "口が重い",
  "口にする",
  "口に合う",
  "口を出す",
  "口実",
  "口論",
  "古新聞",
  "只今",
  "可燃塵",
  "可能",
  "台無し",
  "台詞",
  "叶える",
  "各々",
  "各地",
  "合コン",
  "合同",
  "合間",
  "吊るす",
  "同士",
  "同期",
  "同様",
  "名人",
  "名所",
  "名物",
  "向き合う",
  "向く",
  "向上",
  "否定",
  "含む",
  "吸収",
  "吹雪",
  "呆れる",
  "呉々も",
  "告げる",
  "周囲",
  "周辺",
  "味付け",
  "呼びかける",
  "呼び出す",
  "呼び止める",
  "呼吸",
  "呼称",
  "哀れ",
  "品質",
  "唯一",
  "唸る",
  "嗅ぐ",
  "嘗て",
  "囁く",
  "四季",
  "回収",
  "困難",
  "固まる",
  "国会",
  "国旗",
  "国籍",
  "土地",
  "地位",
  "地元",
  "地区",
  "地道",
  "基本",
  "基礎",
  "報道",
  "場面",
  "塵袋",
  "増す",
  "売り上げ",
  "売り出す",
  "売り買い",
  "売れ行き",
  "夕焼け",
  "夕立",
  "外交",
  "多彩",
  "夜明け",
  "夜間",
  "大いに",
  "大した",
  "大まか",
  "大企業",
  "大半",
  "大地",
  "大家",
  "大小",
  "大工",
  "大幅",
  "大手",
  "大気",
  "大胆",
  "大臣",
  "大金",
  "大雑把",
  "天然",
  "夫人",
  "失望",
  "奇妙",
  "契約",
  "好き嫌い",
  "好ましい",
  "好物",
  "如何にも",
  "妊娠",
  "妨げる",
  "委員",
  "姿勢",
  "威かす",
  "威張る",
  "嫌味",
  "学ぶ",
  "学会",
  "学力",
  "学問",
  "学歴",
  "学習",
  "守る",
  "安定",
  "安易",
  "完成",
  "宗教",
  "定期的",
  "定着",
  "宝籤",
  "実に",
  "実施",
  "実物",
  "実現",
  "実績",
  "実際",
  "客観的だ",
  "宣伝",
  "家屋",
  "容器",
  "宿泊",
  "寄り道",
  "寄付",
  "寒気",
  "寛ぐ",
  "寝付き",
  "寝心地",
  "察する",
  "寧ろ",
  "対応",
  "対立",
  "寿命",
  "専念",
  "尊重",
  "小柄な",
  "少なくとも",
  "少子化",
  "少年",
  "尤も",
  "就く",
  "尽くす",
  "居場所",
  "居心地",
  "屋根",
  "展覧会",
  "展開",
  "属する",
  "屡々",
  "巡る",
  "工夫",
  "左右",
  "巫山戯る",
  "差し引く",
  "市場",
  "帰省",
  "平凡",
  "平社員",
  "平等",
  "年中",
  "年代",
  "年度",
  "年月",
  "年金",
  "年間",
  "幸福",
  "幹事",
  "幾分",
  "広々",
  "広大な",
  "延びる",
  "延長",
  "建築",
  "引き受ける",
  "引き止める",
  "引き落とし",
  "引き返す",
  "引っ掛かる",
  "引用",
  "弱気",
  "張り切る",
  "強化",
  "強引",
  "強調",
  "当たる",
  "当てはまる",
  "役目",
  "役者",
  "彼奴",
  "後回し",
  "後日",
  "従う",
  "従来",
  "従業員",
  "得る",
  "御中",
  "御負け",
  "御辞儀",
  "復興",
  "微か",
  "徹夜",
  "心が動く",
  "心が狭い",
  "心が通う",
  "心を引かれる",
  "心を許す",
  "心を配る",
  "心地よい",
  "心強い",
  "心当たり",
  "心得る",
  "心構え",
  "心細い",
  "心身",
  "必死",
  "志す",
  "志望",
  "応える",
  "応対",
  "応用",
  "応答",
  "忠告",
  "忠実",
  "快い",
  "快適",
  "念のため",
  "怒鳴る",
  "思いがけず",
  "思いつく",
  "思いやり",
  "思い浮かべる",
  "思い立つ",
  "思い込む",
  "思わず",
  "思想",
  "急増",
  "急激",
  "急用",
  "急速",
  "性質",
  "恋しい",
  "恐れる",
  "恐縮",
  "恨む",
  "恵まれる",
  "悔やむ",
  "悲劇",
  "情けない",
  "情緒",
  "惨め",
  "愈々",
  "意図",
  "意志",
  "意思",
  "意欲",
  "意識",
  "愚痴",
  "感想",
  "慎重",
  "慰める",
  "憂鬱",
  "憎らしい",
  "成果",
  "成立",
  "我々",
  "我が家",
  "戦う",
  "戸惑う",
  "所為",
  "所謂",
  "手が塞がる",
  "手が掛かる",
  "手が空く",
  "手が離せない",
  "手にする",
  "手に付かない",
  "手に入れる",
  "手を付ける",
  "手を休める",
  "手を抜く",
  "手を貸す",
  "手作り",
  "手入れ",
  "手前",
  "手品",
  "手当て",
  "手数料",
  "手書き",
  "手段",
  "手話",
  "手配",
  "手頃",
  "手順",
  "手首",
  "打ち合わせ",
  "打ち明ける",
  "払い込む",
  "扱う",
  "抜く",
  "抱える",
  "抱く",
  "押し付ける",
  "押し込む",
  "抽選",
  "担う",
  "担ぐ",
  "担任",
  "拒否",
  "拘り",
  "拘る",
  "招く",
  "拡大",
  "持ち上げる",
  "持ち主",
  "持ち物",
  "持て成す",
  "指す",
  "指導",
  "挑戦",
  "挙げる",
  "挟む",
  "振り返る",
  "捕まる",
  "捜査",
  "捻じる",
  "採点",
  "探る",
  "接する",
  "接続",
  "接近",
  "推薦",
  "掲げる",
  "掴む",
  "揉む",
  "揉める",
  "描く",
  "提供",
  "提案",
  "換気",
  "援助",
  "揶揄う",
  "携わる",
  "撥ねる",
  "撮影",
  "擦れ違う",
  "支持",
  "支援",
  "支給",
  "支配",
  "改めて",
  "改める",
  "改善",
  "改正",
  "改行",
  "攻める",
  "放って置く",
  "政党",
  "政策",
  "故郷",
  "救助",
  "敗れる",
  "教わる",
  "教養",
  "敢えて",
  "敬う",
  "敬意",
  "整える",
  "敷金",
  "文句",
  "文明",
  "文書",
  "斜め",
  "断然",
  "新た",
  "新入社員",
  "新築",
  "方針",
  "方面",
  "施設",
  "旅先",
  "既に",
  "日中",
  "日光",
  "日和",
  "日差し",
  "日時",
  "日陰",
  "旺盛",
  "昇る",
  "昇進",
  "明らか",
  "明確な",
  "映す",
  "普及",
  "景気",
  "暴れる",
  "暴力",
  "更に",
  "更新",
  "書き取る",
  "書き手",
  "書き留める",
  "書き込む",
  "書物",
  "替える",
  "最適",
  "月日",
  "有り得ない",
  "有り触れた",
  "有り難い",
  "有無",
  "有給休暇",
  "望ましい",
  "未だに",
  "本の",
  "本体",
  "本年",
  "本来",
  "本格的",
  "本番",
  "果たして",
  "果たす",
  "栄える",
  "根気",
  "格好",
  "栽培",
  "梅雨",
  "植物",
  "検索",
  "検討",
  "業績",
  "極僅か",
  "構わない",
  "構成",
  "様々な",
  "権利",
  "横断",
  "機能",
  "欠かす",
  "欠ける",
  "欲張り",
  "止す",
  "正に",
  "歩行者",
  "残高",
  "殴る",
  "段ボール",
  "段落",
  "比較",
  "民間",
  "気が付く",
  "気が利く",
  "気が合う",
  "気が小さい",
  "気が強い",
  "気が早い",
  "気が進まない",
  "気が重い",
  "気にかかる",
  "気に食わない",
  "気を抜く",
  "気を遣う",
  "気不味い",
  "気候",
  "気分転換",
  "気味",
  "気配り",
  "水準",
  "永遠",
  "求人",
  "汚染",
  "決まり",
  "決意",
  "治める",
  "法則",
  "洗い物",
  "洗練",
  "洗面所",
  "活気",
  "活用",
  "活発な",
  "派遣社員",
  "流し",
  "流す",
  "流石",
  "浴衣",
  "海水浴",
  "海辺",
  "消去",
  "消費税",
  "消防車",
  "深刻",
  "混同",
  "添える",
  "清々しい",
  "清掃",
  "清潔",
  "済まない",
  "渋い",
  "減り張り（を付ける）",
  "減量",
  "温もり",
  "温厚な",
  "温帯",
  "温暖化",
  "測定した",
  "湿疹",
  "満足",
  "溢れる",
  "溶け込む",
  "漁業",
  "漏れる",
  "演劇",
  "演技",
  "演説",
  "漕ぐ",
  "漸く",
  "潜る",
  "濯ぐ",
  "火災",
  "災害",
  "炊事",
  "点検",
  "無口",
  "無理矢理",
  "無邪気",
  "無限",
  "無難",
  "煩わしい",
  "煮える",
  "熟々",
  "熟す",
  "熱中",
  "熱中症",
  "熱意",
  "爆発",
  "爪先",
  "物事",
  "物干し",
  "物置",
  "物足りない",
  "物音",
  "特技",
  "特殊",
  "特製",
  "犯罪",
  "状況",
  "狂う",
  "狙う",
  "独り言",
  "独立",
  "献立",
  "現に",
  "現在",
  "現地",
  "現状",
  "環境",
  "甘える",
  "甘み",
  "生える",
  "生かす",
  "生きがい",
  "生き物",
  "生み出す",
  "生地",
  "生年月日",
  "生憎",
  "生物",
  "生産",
  "生臭い",
  "産む",
  "用いる",
  "用心",
  "用紙",
  "用途",
  "由来",
  "申し訳ない",
  "異常",
  "異文化",
  "疎か",
  "疑わしい",
  "疲労",
  "病む",
  "発想",
  "発明",
  "発生",
  "発行",
  "発言",
  "的確",
  "盛り上がる",
  "監督",
  "目がない",
  "目が回る",
  "目が離せない",
  "目にする",
  "目に付く",
  "目に浮かぶ",
  "目を向ける",
  "目を疑う",
  "目を通す",
  "目上",
  "目出度い",
  "目安",
  "目撃",
  "目標",
  "直後",
  "直接",
  "直線",
  "相応しい",
  "相次ぐ",
  "省エネ",
  "看病",
  "眺め",
  "眺める",
  "着々",
  "睨む",
  "瞬間",
  "矛盾",
  "知事",
  "知恵",
  "短気",
  "砂漠",
  "破る",
  "碌に",
  "確定",
  "確実",
  "確率",
  "示す",
  "社交的",
  "社会人",
  "神話",
  "禁物",
  "福祉",
  "移動",
  "移民",
  "程度",
  "税金",
  "穏やかな",
  "空席",
  "空想",
  "空間",
  "突っ込む",
  "立ち上げる",
  "立て替える",
  "競う",
  "競技",
  "筋肉",
  "箇所",
  "節電",
  "範囲",
  "築く",
  "籠る",
  "粗大塵",
  "粗末",
  "粗筋",
  "粘り強い",
  "精々",
  "精一杯",
  "納める",
  "納得",
  "紛らわしい",
  "素人",
  "素朴な",
  "素材",
  "細菌",
  "終了",
  "組み合わせる",
  "組む",
  "組織",
  "結びつく",
  "結構",
  "統一",
  "絵本",
  "絶えず",
  "絶える",
  "絶望",
  "継ぐ",
  "継続",
  "続々と",
  "続出",
  "維持",
  "編み物",
  "編集",
  "縛る",
  "縮まる",
  "署名",
  "美味い",
  "義務",
  "習い事",
  "考え込む",
  "耐える",
  "耳が痛い",
  "耳が遠い",
  "耳にする",
  "耳を傾ける",
  "耳を疑う",
  "肝心な",
  "肥満",
  "肩を落とす",
  "背景",
  "胡麻を擂る",
  "胸が一杯になる",
  "胸が痛む",
  "胸を弾ませる",
  "脂肪",
  "脹らむ",
  "腕がいい",
  "腕が上がる",
  "腕を磨く",
  "腫れる",
  "腹が立つ",
  "腹を抱える",
  "臆病",
  "自ら",
  "自動的",
  "自己紹介",
  "自治体",
  "自立",
  "自覚",
  "臭い",
  "至急",
  "興奮",
  "舐める",
  "色彩",
  "芝生",
  "花嫁",
  "芸術家",
  "若々しい",
  "若しかすると",
  "若者",
  "苦痛",
  "草臥れる",
  "荒っぽい",
  "荒れる",
  "莫大",
  "華やかな",
  "落ち込む",
  "落書き",
  "著しい",
  "著者",
  "薄める",
  "薬品",
  "血圧",
  "血管",
  "行き先",
  "行き帰り",
  "行き来",
  "行事",
  "行動",
  "行方",
  "行為",
  "衣類",
  "表示",
  "衰える",
  "裁判",
  "裏切る",
  "補給",
  "製品",
  "複数",
  "要旨",
  "要求",
  "要素",
  "要領",
  "覆う",
  "見た目",
  "見っともない",
  "見つめる",
  "見事",
  "見出し",
  "見合わせる",
  "見回る",
  "見当",
  "見慣れる",
  "見方",
  "見渡す",
  "見知らぬ",
  "見習う",
  "見聞き",
  "見苦しい",
  "見解",
  "見送る",
  "見逃す",
  "視線",
  "視野",
  "覗く",
  "覚え",
  "覚悟",
  "観客",
  "観測",
  "解釈",
  "言いつける",
  "言い出す",
  "言い換える",
  "言い訳",
  "言わば",
  "訂正",
  "訓練",
  "記号",
  "訪れる",
  "設定",
  "許す",
  "訳す",
  "訴える",
  "評価",
  "評判",
  "試みる",
  "試着",
  "試食",
  "詫びる",
  "詰まる",
  "誇り",
  "認める",
  "認識",
  "誓う",
  "語学学校",
  "誤る",
  "誤解",
  "説得",
  "読書家",
  "課題",
  "調査",
  "調節",
  "諄い",
  "論じる",
  "論理的な",
  "謙虚な",
  "謙遜",
  "講師",
  "警備",
  "議員",
  "議論",
  "豪華",
  "負う",
  "負ぶう",
  "負傷",
  "負担",
  "貢献",
  "責める",
  "貴社",
  "貴重",
  "貶す",
  "買い換え",
  "貸し借り",
  "貼り付ける",
  "賃貸",
  "資本",
  "資源塵",
  "賞味期限",
  "質素",
  "購入",
  "赤字",
  "赴任",
  "起動",
  "起床",
  "超過",
  "足が出る",
  "足を伸ばす",
  "足を引っ張る",
  "足を運ぶ",
  "足元",
  "跨ぐ",
  "躊躇う",
  "躓く",
  "身につける",
  "身の回り",
  "身分証明書",
  "身近",
  "軈て",
  "転がる",
  "転勤",
  "転職",
  "転送",
  "載る",
  "辛抱",
  "辞退",
  "農家",
  "辺り",
  "込める",
  "近々",
  "近づける",
  "近寄る",
  "近所付き合い",
  "近郊",
  "返品",
  "返済",
  "返金",
  "迫る",
  "述べる",
  "追い出す",
  "退屈",
  "退職",
  "逃す",
  "逆らう",
  "逆転",
  "透明な",
  "這う",
  "通常",
  "通用",
  "通行",
  "通院",
  "連想",
  "逸らす",
  "運命",
  "運賃",
  "過去",
  "過失",
  "過程",
  "達する",
  "達成",
  "遣っ付ける",
  "遣り甲斐",
  "遥か",
  "適度な",
  "適用",
  "選択",
  "選挙",
  "遺伝",
  "避ける",
  "避難",
  "都市",
  "配布",
  "配慮",
  "配達",
  "醜い",
  "重なり",
  "重ねる",
  "重体",
  "重役",
  "重視",
  "金額",
  "釣り合う",
  "鈍々",
  "銘々",
  "鍛える",
  "鑑賞",
  "開会",
  "開始",
  "開発",
  "間もなく",
  "間取り",
  "間隔",
  "関わる",
  "関連",
  "防止",
  "防犯",
  "降水量",
  "限る",
  "除く",
  "陽気",
  "隙間",
  "障害",
  "隠す",
  "離れる",
  "需要",
  "静まる",
  "非難",
  "面積",
  "順位",
  "順序",
  "頑丈",
  "頑固な",
  "頭が下がる",
  "頭が固い",
  "頭が痛い",
  "頭にくる",
  "頷く",
  "頻り",
  "頼もしい",
  "頼る",
  "顔が広い",
  "顔を出す",
  "願書",
  "風呂場",
  "風景",
  "颯と",
  "飛び出す",
  "飛び回る",
  "飛ぶ",
  "飛んでもない",
  "食卓",
  "食物",
  "飢える",
  "飼い主",
  "飽きる",
  "飽く迄",
  "養う",
  "首になる",
  "馬鹿にする",
  "馬鹿馬鹿しい",
  "馴れ馴れしい",
  "馴染む",
  "騒音",
  "騙す",
  "驚かす",
  "高くつく",
  "高価",
  "高度",
  "高等",
  "鬱陶しい",
  "鮮やか",
  "鳴く",
  "黙る",
  "齧る",
    "あたふた",
  "あべこべ",
  "あやふや",
  "あわや",
  "いざと言う時",
  "いざ知らず",
  "いそいそ",
  "いっそ",
  "うかうか",
  "うっすら",
  "うんと",
  "おっかない",
  "おっちょこちょい",
  "おどおど",
  "お手上げ",
  "お節介",
  "かける",
  "かんかん",
  "がっくり",
  "がっしり",
  "がっちり",
  "がらっと",
  "がんがん",
  "きっかり",
  "きっぱり",
  "ぎくしゃく",
  "ぎゅうぎゅう",
  "くすくす",
  "くっきり",
  "くよくよ",
  "くらくら",
  "ぐったり",
  "ぐにゃぐにゃ",
  "げっそり",
  "げらげら",
  "ごくごく",
  "ごしごし",
  "さっぱり",
  "さばさば",
  "ざあざあ",
  "しくじる",
  "しっとり",
  "しぶとい",
  "しんなり",
  "じっとり",
  "じめじめ",
  "じゃん拳",
  "じわり",
  "すいすい",
  "すばしっこい",
  "すやすや",
  "すらすら",
  "すらりと",
  "すんなり",
  "ずきずき",
  "ずばり",
  "ずるずる",
  "せこい",
  "そこそこ",
  "ぞろぞろ",
  "ぞんざい",
  "ため口",
  "だらだら",
  "ちくちく",
  "ちやほや",
  "ちょくちょく",
  "ちらほら",
  "つつく",
  "つれない",
  "てきぱき",
  "てんで",
  "どん底",
  "なあなあ",
  "なんと",
  "ねた",
  "のこのこ",
  "はきはき",
  "ばてる",
  "ばらす",
  "ばらばら",
  "ぱらぱら",
  "ひしひし",
  "ひっそり",
  "びくびく",
  "びっしょり",
  "びり",
  "ぴたり",
  "ぴりぴり",
  "ふらつく",
  "ふらりと",
  "ふわふわ",
  "ふんだん",
  "ぶうぶう言う",
  "ぶっきら棒",
  "ぶれる",
  "ぺこぺこ",
  "ほっそり",
  "ぼける",
  "ぼちぼち",
  "ぼやく",
  "ぼやける",
  "ぽっかり",
  "まちまち",
  "まめ",
  "まんまと",
  "むかむか",
  "むっつり",
  "めきめき",
  "めっきり",
  "もやもや",
  "やけに",
  "やばい",
  "ややこしい",
  "やり遂げる",
  "ゆとり",
  "よそ見",
  "よもや",
  "アイデンティティー",
  "アップ",
  "アトピー",
  "アトラクション",
  "アフターサービス",
  "インパクト",
  "インフラ",
  "エッセイ",
  "エリート",
  "オゾン層",
  "オファー",
  "オプション",
  "オーロラ",
  "カテゴリー",
  "カルテ",
  "ガーゼ",
  "キャッチ",
  "キャリア",
  "キャンペーン",
  "キレる",
  "ギャラ",
  "クール",
  "グレード",
  "ゲスト",
  "ゲット",
  "コネ",
  "コミュニティー",
  "コンプレックス",
  "ゴールイン",
  "ゴールデンタイム",
  "サイドビジネス",
  "サービスエリア",
  "シナリオ",
  "シビア",
  "シャイ",
  "シャープ",
  "シール",
  "ジェットコースター",
  "ストレッチ",
  "スリーサイズ",
  "セキュリティ",
  "セクション",
  "セレブ",
  "ソフト",
  "タイト",
  "タイミング",
  "ターゲット",
  "ダム",
  "チャーミング",
  "テンション",
  "デマ",
  "ドキュメンタリー",
  "ドライ",
  "ドリル",
  "ニート",
  "ネガティブ",
  "ネック",
  "ノルマ",
  "ハンデ",
  "バトンタッチ",
  "バブル",
  "バリアフリー",
  "バンク",
  "バージョンアップ",
  "バーベキュー",
  "パワハラ",
  "パール",
  "ピンからキリまで",
  "フィクション",
  "フィルター",
  "フォーマル",
  "ブレイク",
  "ブログ",
  "プラスアルファ",
  "プロフィール",
  "ベストセラー",
  "ポイント",
  "ポジション",
  "ポジティブ",
  "マニア",
  "マンネリ",
  "ラフ",
  "リアル",
  "リフォーム",
  "レッスン",
  "ロープ",
  "一から十まで",
  "一か八か",
  "一休み",
  "一同",
  "一帯",
  "一律",
  "一心",
  "一息入れる",
  "一括",
  "一挙に",
  "一新",
  "一期一会",
  "一概に",
  "一様",
  "一段落",
  "一目惚れ",
  "一目置く",
  "一眠り",
  "一石二鳥",
  "一筋",
  "一苦労",
  "一見",
  "一躍",
  "一連",
  "一長一短",
  "一面",
  "万人",
  "万全",
  "三日坊主",
  "三昧",
  "上の空",
  "上向く",
  "上回る",
  "上昇",
  "上演",
  "下取り",
  "下地",
  "下心",
  "下火になる",
  "不備",
  "不利",
  "不可欠",
  "不味い",
  "不審",
  "不幸中の幸い",
  "不当",
  "不意",
  "不服",
  "不正",
  "不穏な",
  "不細工",
  "不良品",
  "不通",
  "且つ",
  "世論",
  "並びに",
  "中傷",
  "中毒",
  "丸々",
  "丸っきり",
  "丸める",
  "丸事",
  "丹念",
  "主体",
  "主旨",
  "主要な",
  "主題",
  "乏しい",
  "乗っ取る",
  "乗り切る",
  "乗り気",
  "乗り込む",
  "乗る",
  "乱れる",
  "了承",
  "予々",
  "予備",
  "予告",
  "予言",
  "事によると",
  "事例",
  "事前",
  "事態",
  "事業",
  "二の次",
  "五感",
  "井戸",
  "些か",
  "交える",
  "交わす",
  "交わる",
  "交互",
  "亭主",
  "人並み",
  "人当たり",
  "人情",
  "人懐こい",
  "人気",
  "人波",
  "人目",
  "人知れず",
  "人違い",
  "今時",
  "介入",
  "仕入れる",
  "仕切る",
  "仕掛ける",
  "仕来り",
  "仕組み",
  "仕舞い",
  "仕草",
  "他界",
  "付き添う",
  "代わる代わる",
  "代理",
  "代用",
  "以ての外",
  "仮に",
  "仮定",
  "仰ぐ",
  "企画",
  "会見",
  "伝説",
  "似通う",
  "住人",
  "体付き",
  "体制",
  "体脂肪",
  "体重計",
  "何だかんだ",
  "何でも彼んでも",
  "何としても",
  "何と言っても",
  "何やら",
  "何ら",
  "何らか",
  "何れ[×どれ]",
  "何れにしても",
  "何分",
  "何卒",
  "余地",
  "余所",
  "余暇",
  "余程",
  "作戦",
  "使いこなす",
  "使い分ける",
  "使える",
  "例の",
  "依存",
  "依然として",
  "侮辱",
  "侵す",
  "促す",
  "俄か",
  "俄然",
  "保つ",
  "保守的な",
  "保証",
  "保障",
  "修復",
  "俯せ",
  "個別",
  "値する",
  "値打ち",
  "倹約",
  "偏に",
  "偏る",
  "偏差値",
  "偏見",
  "停める",
  "停滞",
  "健全",
  "健在",
  "健闘",
  "偽造",
  "催す",
  "億劫",
  "儚い",
  "優位",
  "優雅",
  "兆し",
  "兆候",
  "先入観",
  "先方",
  "先着",
  "先行",
  "先頃",
  "先頭",
  "克明",
  "免除",
  "兎や角",
  "兎角",
  "入手",
  "全快",
  "全般",
  "全身",
  "公用",
  "公的な",
  "公私",
  "公表",
  "公開",
  "共働き",
  "共同",
  "共学",
  "共感",
  "兼ねる",
  "内心",
  "内訳",
  "内閣",
  "円満",
  "円滑な",
  "再三",
  "再婚",
  "再現",
  "冒す",
  "冴える",
  "冷やかす",
  "冷却",
  "冷淡",
  "凌ぐ",
  "凛々しい",
  "凝らす",
  "凝る",
  "几帳面",
  "処方箋",
  "凹む",
  "出くわす",
  "出しゃばり",
  "出っ張る",
  "出動",
  "出向く",
  "出回る",
  "出演",
  "出現",
  "出生",
  "出直す",
  "出社",
  "出費",
  "出題",
  "分別",
  "分担",
  "分配",
  "切ない",
  "切に",
  "切りがいい",
  "切りがない",
  "切り抜ける",
  "切れる",
  "刑務所",
  "初耳",
  "別状",
  "別荘",
  "利子",
  "利害",
  "利点",
  "利益",
  "到底",
  "刺さる",
  "刺す",
  "削減",
  "前例",
  "前売り",
  "前払い",
  "前提",
  "前線",
  "前置き",
  "前途多難",
  "前途洋々",
  "剝ぐ",
  "剥ぐ",
  "割り切る",
  "割り当てる",
  "割合",
  "創立",
  "創造",
  "加入",
  "加工",
  "劣る",
  "劣等感",
  "助言",
  "努めて",
  "労る",
  "労力",
  "動向",
  "勘違い",
  "勝る",
  "募る",
  "勤勉",
  "勧誘",
  "包む",
  "化ける",
  "匹敵",
  "匿名",
  "千差万別",
  "卑しい",
  "協議",
  "単身",
  "危うい",
  "危ぶむ",
  "即刻",
  "却下",
  "原則",
  "原稿",
  "厳かな",
  "去る",
  "参照",
  "及ぶ",
  "双方",
  "反らす",
  "反則",
  "反発",
  "反響",
  "取り分け",
  "取り合う",
  "取り囲む",
  "取り急ぎ",
  "取り次ぐ",
  "取り立てる",
  "取り調べ",
  "取得",
  "受ける",
  "受け持つ",
  "受け止める",
  "受け継ぐ",
  "口から先に生まれたよう",
  "口が肥える",
  "口が重い",
  "口を挟む",
  "口数が少ない",
  "口遊む",
  "口頭",
  "只管",
  "可決",
  "右往左往",
  "叶う",
  "合意",
  "合致",
  "同い年",
  "同一",
  "同上",
  "同伴",
  "同意",
  "同感",
  "同郷",
  "名付ける",
  "名称",
  "名義",
  "名誉",
  "吟味",
  "呆気ない",
  "呉れ呉れも",
  "告げ口",
  "告白",
  "告知",
  "周年",
  "味覚",
  "呼び捨て",
  "和やか",
  "和らげる",
  "和気藹々",
  "和紙",
  "和解",
  "咎める",
  "品種",
  "唱える",
  "啜る",
  "善し悪し",
  "善悪",
  "喉から手が出る",
  "喘息",
  "喜ばしい",
  "喜怒哀楽",
  "喪失",
  "営む",
  "嗜む",
  "噎せる",
  "噛み切る",
  "噛み合う",
  "噴火",
  "囀る",
  "四六時中",
  "回す",
  "回り道",
  "回収",
  "回答",
  "回送",
  "囲碁",
  "図る",
  "図案",
  "固い",
  "国家",
  "国産",
  "国連",
  "土台",
  "土手",
  "土砂",
  "圧倒",
  "圧巻",
  "圧縮",
  "圧迫",
  "在庫",
  "在籍",
  "地下街",
  "地形",
  "型に嵌まる",
  "埋まる",
  "埋め立てる",
  "執着",
  "基準",
  "堂々",
  "堪能",
  "報じる",
  "増して",
  "増殖",
  "壮大",
  "声援",
  "声明",
  "売り手",
  "売買",
  "変遷",
  "夕闇",
  "外出",
  "外方を向く",
  "外観",
  "外貨",
  "外資系企業",
  "多かれ少なかれ",
  "多数決",
  "多様",
  "夜分",
  "夜更け",
  "夥しい",
  "大々的",
  "大まか",
  "大らか",
  "大国",
  "大家",
  "大層",
  "大幅",
  "大方",
  "大目に見る",
  "大陸",
  "失格",
  "奇跡的",
  "契機",
  "女房",
  "好ましい",
  "好意",
  "好感",
  "好調",
  "好転",
  "如何なる",
  "妨害",
  "始末",
  "始終",
  "委ねる",
  "嫉む",
  "嫉妬",
  "嫌々",
  "嫌がらせ",
  "嫌に",
  "嫌らしい",
  "存続",
  "孤独",
  "孤立",
  "安らぐ",
  "安静",
  "定める",
  "定義",
  "宛てる",
  "実る",
  "実在",
  "実情",
  "実業家",
  "実権",
  "実況",
  "実践",
  "宥める",
  "害する",
  "家出",
  "家庭菜園",
  "家業",
  "家系",
  "家計",
  "容姿",
  "容易い",
  "寄せる",
  "寄せ集める",
  "寄り添う",
  "寄越す",
  "密か",
  "密度",
  "密接",
  "富む",
  "寛ぐ",
  "寛大な",
  "寛容",
  "寝かす",
  "寝苦しい",
  "察する",
  "対人関係",
  "対処",
  "対抗",
  "対比",
  "対等",
  "対策",
  "専ら",
  "将棋",
  "小っぽけ",
  "尖る",
  "就きましては",
  "尻尾",
  "尽きる",
  "尽くす",
  "屈折",
  "屋内",
  "山々",
  "山積み",
  "崇拝",
  "嵌まる",
  "嵩む",
  "嵩張る",
  "左利き",
  "巧みな",
  "巧妙な",
  "巨匠",
  "差し出した",
  "差し引く",
  "差し掛かる",
  "差し支える",
  "差す",
  "市場",
  "希少な",
  "希薄",
  "帯びる",
  "帰宅",
  "干渉",
  "年配",
  "庇う",
  "度忘れ",
  "廃止",
  "延々",
  "延いては",
  "弁える",
  "弁明",
  "弁解",
  "弄る",
  "弊害",
  "弊社",
  "引かれる",
  "引き下がる",
  "引き摺る",
  "引き立てる",
  "引き籠る",
  "引き継ぐ",
  "引き締める",
  "引き起こす",
  "引く",
  "引っ掛かる",
  "引っ込む",
  "弛む",
  "弱まる",
  "弱る",
  "弱音",
  "張り",
  "張り合う",
  "強い",
  "強いて",
  "強いる",
  "強がる",
  "強ち",
  "強まる",
  "強制",
  "強情",
  "強烈",
  "強行",
  "強請る",
  "弾く",
  "弾む",
  "当人",
  "当番",
  "当選",
  "彫る",
  "彼此",
  "待ち望む",
  "待ち遠しい",
  "待望",
  "後々",
  "後を絶たない",
  "後回し",
  "後押し",
  "徐に",
  "徒に",
  "得意満面",
  "御仕舞い",
  "御袋,お袋",
  "復旧",
  "徹する",
  "心が躍る",
  "心中",
  "心底",
  "心得る",
  "心掛ける",
  "心構え",
  "心苦しい",
  "忌まわしい",
  "志す",
  "応急",
  "念じる",
  "念入り",
  "怒り",
  "思いやり",
  "思惑",
  "怠る",
  "急速",
  "急遽",
  "性能",
  "恋する",
  "恐れ入る",
  "恐縮",
  "恥じらう",
  "恩師",
  "息が切れる",
  "息が弾む",
  "息が詰まる",
  "息が長い",
  "息をつく",
  "息を呑む",
  "息を抜く",
  "息苦しい",
  "恵み",
  "恵む",
  "悉く",
  "悠々",
  "悩ます",
  "悪どい",
  "悲惨な",
  "情け深い",
  "情熱",
  "惑わす",
  "惑星",
  "惚気る",
  "惜しむ",
  "惨め",
  "意向",
  "意地",
  "意地っ張り",
  "意気揚々",
  "意気込む",
  "意識不明",
  "愛しい",
  "愛犬",
  "感無量",
  "慎む",
  "慕う",
  "慢性",
  "慣らす",
  "憂鬱",
  "憤る",
  "憩う",
  "懐く",
  "懲りる",
  "成り立つ",
  "成り行き",
  "成果",
  "戦力",
  "戸締まり",
  "戸締り",
  "所々",
  "所有",
  "所詮",
  "手が回らない",
  "手が足りない",
  "手っ取り早い",
  "手に余る",
  "手に負えない",
  "手も足も出ない",
  "手を切る",
  "手を焼く",
  "手中",
  "手元",
  "手分け",
  "手加減",
  "手取り",
  "手口",
  "手引き",
  "手抜き",
  "手掛かり",
  "手掛ける",
  "手数",
  "手本",
  "手筈",
  "手芸",
  "手記",
  "手近",
  "手遅れ",
  "手違い",
  "手際",
  "手順",
  "打ち上げ",
  "打ち切る",
  "打ち明ける",
  "打ち解ける",
  "打ち込む",
  "承る",
  "承知",
  "承認",
  "把握",
  "抑々",
  "抑える",
  "抑制",
  "抓る",
  "投げ出す",
  "投稿",
  "抗議",
  "折り返す",
  "抜く",
  "抜け出す",
  "抜群",
  "披露",
  "押さえる",
  "押しかける",
  "押し切る",
  "抽選",
  "拍車をかける",
  "拒む",
  "拗ねる",
  "拗らせる",
  "拗れる",
  "拝む",
  "拝借",
  "持ち込む",
  "持ち運ぶ",
  "持って来い",
  "持て成す",
  "持参",
  "持続",
  "指さす",
  "指す",
  "指名",
  "指図",
  "指摘",
  "指数",
  "挑む",
  "挙げ句の果て",
  "振り出し",
  "振る舞う",
  "捗る",
  "捧げる",
  "据え付ける",
  "捲る",
  "捻挫",
  "授かる",
  "掘る",
  "掛け替えのない",
  "控える",
  "推測",
  "推移",
  "掬う",
  "掲げる",
  "掲載",
  "掻き回す",
  "揃い",
  "揉む",
  "描写",
  "提示",
  "換算",
  "揺する",
  "揺るがす",
  "損害",
  "搬送",
  "携わる",
  "摘む",
  "摩る",
  "撮影",
  "操る",
  "操縦",
  "擦る",
  "擽る",
  "攫われる",
  "支援",
  "改める",
  "改定",
  "改良",
  "改装",
  "放り出す",
  "放り込む",
  "放映",
  "放棄",
  "教訓",
  "敢えて",
  "散々",
  "散蒔く",
  "敬遠",
  "整備",
  "文房具",
  "斜面",
  "斡旋",
  "断つ",
  "断固",
  "断定",
  "断念",
  "断言",
  "新人",
  "新入り",
  "新卒",
  "方々",
  "施行",
  "日々",
  "日取り",
  "日向",
  "日夜",
  "日本列島",
  "日没",
  "日系企業",
  "早まる",
  "早口",
  "早急",
  "明かす",
  "明かり",
  "明るい",
  "明快",
  "明白",
  "昏睡",
  "星座",
  "映える",
  "是非",
  "時めく",
  "時折",
  "時速",
  "晒す",
  "暑苦しい",
  "暗唱",
  "暗示",
  "暫し",
  "暮れる",
  "暴動",
  "暴露",
  "暴風雨",
  "曰く",
  "更ける",
  "書籍",
  "最中",
  "最低限",
  "最先端",
  "最寄り",
  "最早",
  "月並みな",
  "有する",
  "有り有り",
  "有り様",
  "有力",
  "有効",
  "有数",
  "有望",
  "有益な",
  "有罪",
  "有耶無耶",
  "有頂天",
  "朗らかな",
  "朗報",
  "朦朧",
  "未明",
  "未熟",
  "未練",
  "本場",
  "本質",
  "朽ちる",
  "杜撰",
  "束ねる",
  "束縛",
  "条例",
  "来たる",
  "果てしない",
  "架空",
  "染まる",
  "染みる",
  "柔んわり",
  "栄える",
  "栄光",
  "核心",
  "根に持つ",
  "根も葉もない",
  "根刮ぎ",
  "根回し",
  "根底",
  "根拠",
  "根本的な",
  "格差",
  "格式",
  "案じる",
  "案の定",
  "棄権",
  "極めて",
  "極める",
  "極力",
  "極端",
  "楽器",
  "概ね",
  "概要",
  "構う",
  "構える",
  "模範的",
  "模索",
  "権力",
  "横になる",
  "横取り",
  "横柄",
  "機種",
  "欠く",
  "欠陥",
  "次ぐ",
  "欺く",
  "正しく",
  "正体",
  "正味",
  "正常",
  "正当",
  "正気",
  "正規",
  "武器",
  "武道",
  "歩み",
  "歪み",
  "歪む",
  "歳月",
  "歴然",
  "殊の外",
  "残らず",
  "殺到",
  "母国",
  "母校",
  "毟る",
  "民族",
  "気がある",
  "気が向かない",
  "気が引ける",
  "気が散る",
  "気が気でない",
  "気が済む",
  "気が滅入る",
  "気が置けない",
  "気が重い",
  "気さく",
  "気に障る",
  "気体",
  "気兼ね",
  "気取る",
  "気合",
  "気品",
  "気心",
  "気立て",
  "気管支炎",
  "気紛れ",
  "気触れる",
  "気配り",
  "気長",
  "水をさす",
  "氷河",
  "永住",
  "汚らわしい",
  "汲む",
  "決まり悪い",
  "沈黙",
  "沸騰",
  "油断",
  "治安",
  "沿う",
  "沿線",
  "注意報",
  "洋品",
  "洞察力",
  "活字離れ",
  "派遣",
  "流通",
  "浅ましい",
  "浚う",
  "浮き浮き",
  "浮気",
  "浮腫む",
  "海賊版",
  "浸かる",
  "浸す",
  "浸水",
  "消し去る",
  "淀む",
  "淑やか",
  "淡い",
  "混同",
  "添える",
  "清々",
  "清算",
  "渋々",
  "温もり",
  "温室効果ガス",
  "湧き起こる",
  "湧く",
  "満たす",
  "満喫",
  "満更",
  "満月",
  "準じる",
  "溶け込む",
  "滑らか",
  "滑る",
  "滑稽",
  "滞納",
  "滲む",
  "漂う",
  "漕ぐ",
  "漠然",
  "漫然",
  "潔い",
  "潜る",
  "潤い",
  "潤む",
  "澄む",
  "濃やか",
  "濃厚",
  "災い",
  "無口",
  "無名",
  "無我夢中",
  "無礼",
  "無神経",
  "無茶",
  "無言",
  "無論",
  "無謀",
  "無闇",
  "焦げ臭い",
  "然も",
  "然程",
  "煌々",
  "煙たい",
  "煩わしい",
  "煽てる",
  "爽快",
  "片思い",
  "片時",
  "片言",
  "物々しい",
  "物件",
  "物体",
  "物好き",
  "物忘れ",
  "物真似",
  "物陰",
  "特典",
  "特有",
  "特産",
  "特色",
  "特許",
  "特集",
  "犠牲",
  "犬猿の仲",
  "犯す",
  "狙う",
  "独りでに",
  "独占",
  "独自",
  "猛烈",
  "猫に小判",
  "猫の手も借りたい",
  "猫を被る",
  "猿も木から落ちる",
  "獲得",
  "率いる",
  "率先",
  "現行",
  "現象",
  "理屈",
  "瑞々しい",
  "甘い",
  "甘口",
  "甚だしい",
  "生かす",
  "生じる",
  "生まれ付き",
  "生まれ変わる",
  "生やす",
  "生態系",
  "生温い",
  "生理的",
  "生真面目",
  "産出",
  "産地",
  "用品",
  "用心深い",
  "由緒",
  "申し出る",
  "申し分ない",
  "申請",
  "異国",
  "異変",
  "異性",
  "異議",
  "疎か",
  "疎ら",
  "疎通",
  "痛ましい",
  "癒す",
  "癪に障る",
  "発作",
  "発病",
  "発覚",
  "皮膚炎",
  "盆栽",
  "盛り付ける",
  "盛大",
  "目が届く",
  "目が肥える",
  "目が高い",
  "目と鼻の先",
  "目の当たり",
  "目を丸くする",
  "目を引く",
  "目を盗む",
  "目を瞑る",
  "目下",
  "目敏い",
  "目覚める",
  "目論む",
  "直に",
  "直感",
  "直訳",
  "相反する",
  "相子",
  "相槌を打つ",
  "相談に乗る",
  "省みる",
  "真実",
  "真相",
  "眼差し",
  "着付け",
  "着工",
  "着手",
  "着目",
  "着飾る",
  "瞑る",
  "瞬き",
  "矢先",
  "矢鱈",
  "知名度",
  "矯正",
  "破壊",
  "確保",
  "確立",
  "禁じる",
  "禿げる",
  "秘訣",
  "称する",
  "移行",
  "程々",
  "穴場",
  "究明",
  "空白",
  "突き止める",
  "突き詰める",
  "突っ張る",
  "突破",
  "窮屈",
  "立ち去る",
  "立ち寄る",
  "立ち往生",
  "立ち直る",
  "立体的",
  "立候補",
  "立腹",
  "竜巻",
  "端末",
  "第一",
  "等しい",
  "筋がいい",
  "築く",
  "簡潔",
  "粘る",
  "精巧",
  "精神的",
  "精算",
  "純粋",
  "紛れる",
  "紛争",
  "素っ気ない",
  "紫外線",
  "細工",
  "終始",
  "終日",
  "組み込む",
  "経る",
  "経歴",
  "経緯",
  "経費",
  "経過",
  "結び付く",
  "結成",
  "結束",
  "絡む",
  "絶つ",
  "絶大な",
  "絶好",
  "網羅",
  "綴り",
  "綻びる",
  "緊急",
  "総数",
  "編む",
  "緩む",
  "緩和",
  "緯度",
  "練る",
  "縁談",
  "縫う",
  "繁々",
  "繊細",
  "繋がる",
  "織る",
  "纏まる",
  "罵る",
  "群れる",
  "義理",
  "老いる",
  "老ける",
  "老化",
  "老後",
  "老朽化",
  "老若男女",
  "考慮",
  "耐久性",
  "耳につく",
  "耳に挟む",
  "耳に胼胝ができる",
  "耳を塞ぐ",
  "耳を澄ます",
  "耳を貸す",
  "肉親[にくしん]",
  "肩を並べる",
  "肩を持つ",
  "育む",
  "育成",
  "肺炎",
  "背く",
  "脅える",
  "脅す",
  "脆い",
  "脱する",
  "腕前",
  "腹筋",
  "膨れる",
  "膨大な",
  "臨む",
  "自ずから",
  "自ら",
  "自主的",
  "自己",
  "自覚",
  "自首",
  "至って",
  "至る",
  "至る所",
  "至れり尽くせり",
  "致命的",
  "興じる",
  "舞う",
  "良し悪し",
  "良心的",
  "色気",
  "艶々",
  "芳しくない",
  "若しくは",
  "若干",
  "茫然",
  "茶会",
  "草臥れる",
  "荒っぽい",
  "荒らす",
  "荷造り",
  "華々しい",
  "萎びる",
  "萎む",
  "落ち落ち",
  "落胆",
  "著作権",
  "蓄積",
  "蕁麻疹",
  "蕩ける",
  "薬剤師",
  "薬局",
  "藻掻く",
  "蘇る",
  "虚しい",
  "融合",
  "融資",
  "融通",
  "血を引く",
  "行き渡る",
  "行き詰まる",
  "行き違い",
  "行進",
  "街並み",
  "衛星放送",
  "衛生",
  "衝突",
  "表向き",
  "表札",
  "衰える",
  "被災",
  "裁く",
  "裂ける",
  "裏返し",
  "補償",
  "補充",
  "補強",
  "製作",
  "製造",
  "複数",
  "襲う",
  "要する",
  "要因",
  "要点",
  "覆す",
  "見せびらかす",
  "見なす",
  "見下す",
  "見下ろす",
  "見失う",
  "見当",
  "見当たる",
  "見所",
  "見抜く",
  "見晴らし",
  "見栄",
  "見栄っ張り",
  "見極める",
  "見知らぬ",
  "見積もる",
  "見窄らしい",
  "見苦しい",
  "見落とす",
  "見覚ましい",
  "見解",
  "見計らう",
  "見込み",
  "見逃す",
  "見通し",
  "見過ごす",
  "見違える",
  "規制",
  "規定",
  "規模",
  "規約",
  "視察",
  "視聴率",
  "親しむ",
  "親交",
  "親父",
  "観戦",
  "観点",
  "角度",
  "解ける",
  "解雇",
  "触れ合う",
  "言い分",
  "言い張る",
  "言い返す",
  "記す",
  "記述",
  "設ける",
  "設置",
  "設計",
  "証し",
  "証拠",
  "詐欺",
  "該当",
  "誇り",
  "誇大",
  "誇張",
  "認知症",
  "誠に",
  "誠実",
  "誠意",
  "誤り",
  "誤魔化す",
  "説く",
  "読者",
  "課程",
  "調和",
  "調子に乗る",
  "調達",
  "諄い",
  "諸に",
  "警報",
  "議題",
  "豪邸",
  "豪雨",
  "負う",
  "負かす",
  "負けず嫌い",
  "負債",
  "財政",
  "貢献",
  "貧弱な",
  "貧血",
  "貫く",
  "貯水率",
  "貴校",
  "貶す",
  "買い込む",
  "費やす",
  "賄賂",
  "資金",
  "賠償",
  "賢明な",
  "赤の他人",
  "赤らめる",
  "起こす",
  "起伏",
  "起業",
  "起源",
  "超す",
  "越す",
  "足が出る",
  "足が早い",
  "足が棒になる",
  "足を引っ張る",
  "足掻く",
  "路線",
  "跳ねる",
  "踏み切る",
  "踏み躙る",
  "踏み込む",
  "躊躇",
  "身の上",
  "身の回り",
  "身元",
  "身内",
  "身動き",
  "身嗜み",
  "身振り手振り",
  "身軽",
  "身近",
  "軋む",
  "軍事",
  "転々",
  "転じる",
  "転落",
  "軽々",
  "軽快",
  "軽減",
  "軽率な",
  "軽蔑",
  "轢き逃げ",
  "辛うじて",
  "辛党",
  "辛口",
  "辻褄",
  "込み上げる",
  "辿り着く",
  "近寄りがたい",
  "近隣",
  "迫る",
  "追い詰める",
  "追い込む",
  "追及",
  "追放",
  "追求",
  "追究",
  "退治",
  "逃げ出す",
  "逃す",
  "逃れる",
  "逆様",
  "逆立ち",
  "透かさず",
  "透き通る",
  "途切れる",
  "途絶える",
  "通る",
  "通報",
  "逞しい",
  "速やか",
  "速報",
  "連なる",
  "連中",
  "連帯",
  "連携",
  "連載",
  "進化",
  "進度",
  "進行",
  "逸材",
  "遂げる",
  "遅かれ早かれ",
  "遅らせる",
  "運命",
  "運用",
  "過ち",
  "過剰",
  "過労",
  "過疎",
  "過酷",
  "遜る",
  "遠ざかる",
  "遠回し",
  "遠回り",
  "遣り繰り",
  "遣る瀬無い",
  "適性",
  "遭遇",
  "遮る",
  "遺憾",
  "遺産",
  "避ける",
  "郷土",
  "配信",
  "配偶者",
  "配給",
  "重い",
  "重んじる",
  "重宝",
  "野心",
  "野生",
  "金融",
  "鈍る",
  "鍛える。",
  "長々",
  "長い目で見る",
  "長寿",
  "長続き",
  "長閑",
  "門限",
  "開き直る",
  "開封",
  "間誤付く",
  "闇雲",
  "阻む",
  "限りない",
  "陥る",
  "陰口",
  "陰気",
  "隅に置けない",
  "隔てる",
  "隔日",
  "隔月",
  "隔週",
  "際立つ",
  "雀の涙",
  "雑談",
  "難易度",
  "雨雲",
  "雪崩",
  "雲をつかむような",
  "電力",
  "震わせる",
  "震度",
  "震源地",
  "霞む",
  "露出",
  "露呈",
  "露骨",
  "青春",
  "面する",
  "面会",
  "革命",
  "革新的",
  "音色",
  "頂上",
  "頗る",
  "領土",
  "頭が上がらない",
  "頭が切れる",
  "頭を冷やす",
  "頭を抱える",
  "頭打ち",
  "頻度",
  "頻繁",
  "顔から火が出る",
  "顔つき",
  "顔を立てる",
  "顕著",
  "顧みる",
  "風土",
  "風習",
  "風評",
  "飛び切り",
  "飛ぶ",
  "飛躍的",
  "食い止める",
  "食い違う",
  "食わず嫌い",
  "飢える",
  "飲み込む",
  "首が回らない",
  "首を捻る",
  "首を突っ込む",
  "首を縦に振る",
  "首を長くする",
  "首席",
  "香辛料",
  "馬が合う",
  "馴れ初め",
  "駆け引き",
  "駆け込む",
  "駆使",
  "騒ぎ立てる",
  "騒動",
  "驚異的な",
  "高が",
  "高尚",
  "鬱病",
  "鬱陶しい",
  "鮮明",
  "鰻登り",
  "鼻が高い",
  "鼻にかける",
  "鼻につく",
  "齎す"
];

// =================================================================================
// UTILITY FUNCTIONS
// =================================================================================

function debounce(func, delay) {
    let timeoutId;
    return function(...args) {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => func.apply(this, args), delay);
    };
}

function isMobile() {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth <= 768;
}

function getRandomWord() {
    if (RANDOM_WORDS.length === 0) return null;
    const randomIndex = Math.floor(Math.random() * RANDOM_WORDS.length);
    return RANDOM_WORDS[randomIndex];
}

function setTextContent(element, text) {
    if (!element || text === null || text === undefined) return;
    const textStr = String(text);
    element.textContent = textStr;
    // Add a class to tell other parsers (like Yomitan) to ignore this content.
    if (textStr) {
        element.classList.add('no-parse');
    } else {
        element.classList.remove('no-parse');
    }
}

// =================================================================================
// DRAG HANDLER (For moving the UI window)
// =================================================================================

class TouchDragHandler {
    constructor(container, handle) {
        this.container = container; this.handle = handle; this.isDragging = false; this.startX = 0; this.startY = 0;
        this.initialLeft = 0; this.initialTop = 0; this.hasBeenMoved = false; this.enabled = true; this.isMobile = isMobile(); this.init();
    }
    init() {
        this.handle.style.cursor = this.isMobile ? 'default' : 'grab';
        if (!this.isMobile) {
            const dragIcon = document.createElement('span'); dragIcon.innerHTML = '⋮⋮';
            dragIcon.style.cssText = 'color: #64748b; font-size: 14px; margin-right: 8px; user-select: none; opacity: 0.7; transition: opacity 0.2s ease; flex-shrink: 0;';
            this.handle.prepend(dragIcon);
        }
        this.bindEvents();
    }
    bindEvents() {
        this.handle.addEventListener('mousedown', this.onStart.bind(this)); document.addEventListener('mouseup', this.onEnd.bind(this));
        this.handle.addEventListener('touchstart', this.onStart.bind(this), { passive: false }); document.addEventListener('touchend', this.onEnd.bind(this));
    }
    onStart(e) {
        if (!this.enabled || e.target.closest('button')) return;
        const isTouch = e.type === 'touchstart';
        if (!isTouch && e.button !== 0) return;
        e.preventDefault();
        this.isDragging = true;
        const clientX = isTouch ? e.touches[0].clientX : e.clientX; const clientY = isTouch ? e.touches[0].clientY : e.clientY;
        this.startX = clientX; this.startY = clientY;
        const rect = this.container.getBoundingClientRect();
        this.initialLeft = rect.left; this.initialTop = rect.top;
        this.container.classList.add('is-dragging'); this.handle.style.cursor = this.isMobile ? 'default' : 'grabbing'; document.body.classList.add('immersion-kit-dragging');
        if (isTouch) document.addEventListener('touchmove', this.onMove.bind(this), { passive: false });
        else document.addEventListener('mousemove', this.onMove.bind(this));
    }
    onMove(e) {
        if (!this.isDragging) return; e.preventDefault();
        const isTouch = e.type === 'touchmove';
        const clientX = isTouch ? e.touches[0].clientX : e.clientX; const clientY = isTouch ? e.touches[0].clientY : e.clientY;
        const deltaX = clientX - this.startX; const deltaY = clientY - this.startY;
        if (!this.hasBeenMoved) {
            this.container.style.left = `${this.initialLeft}px`; this.container.style.top = `${this.initialTop}px`;
            this.container.style.right = 'auto'; this.container.style.bottom = 'auto'; this.hasBeenMoved = true;
        }
        this.container.style.transform = `translate(${deltaX}px, ${deltaY}px)`;
    }
    onEnd(e) {
        if (!this.isDragging) return;
        this.isDragging = false;
        document.removeEventListener('touchmove', this.onMove.bind(this)); document.removeEventListener('mousemove', this.onMove.bind(this));
        const currentRect = this.container.getBoundingClientRect();
        this.container.style.transform = ''; this.container.style.left = `${currentRect.left}px`; this.container.style.top = `${currentRect.top}px`;
        this.container.classList.remove('is-dragging'); this.handle.style.cursor = this.isMobile ? 'default' : 'grab'; document.body.classList.remove('immersion-kit-dragging');
        this.snapToEdges();
    }
    snapToEdges() {
        const rect = this.container.getBoundingClientRect(); const snapThreshold = this.isMobile ? 20 : 30; const edgePadding = this.isMobile ? 4 : 8;
        let newLeft = rect.left, newTop = rect.top;
        if (rect.left < snapThreshold && rect.left > 0) newLeft = edgePadding;
        else if (window.innerWidth - rect.right < snapThreshold) newLeft = window.innerWidth - rect.width - edgePadding;
        if (rect.top < snapThreshold && rect.top > 0) newTop = edgePadding;
        else if (window.innerHeight - rect.bottom < snapThreshold) newTop = window.innerHeight - rect.height - edgePadding;
        if (newLeft !== rect.left || newTop !== rect.top) {
            this.container.style.transition = 'left 0.2s ease-out, top 0.2s ease-out';
            this.container.style.left = `${newLeft}px`; this.container.style.top = `${newTop}px`;
            setTimeout(() => { if (this.container) this.container.style.transition = ''; }, 200);
        }
    }
    resetPosition() {
        this.hasBeenMoved = false;
        this.container.style.transition = 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)';
        this.container.style.left = ''; this.container.style.top = ''; this.container.style.right = ''; this.container.style.bottom = ''; this.container.style.transform = '';
        setTimeout(() => { if (this.container) this.container.style.transition = ''; }, 300);
    }
}

// =================================================================================
// MAIN IMMERSION KIT HANDLER CLASS
// =================================================================================

class ImmersionKitHandler {
    constructor() {
        this.examples = []; this.currentIndex = 0; this.lastKeyword = null; this.isPlayingAll = false; this.isLoopingAudio = false;
        this.isLargeSize = false; this.isFullScreen = false; this.showNavControls = true; this.container = null; this.dragHandler = null;
        this.elements = {}; this.isMobile = isMobile(); this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
        this.currentAudioSource = null; this.lastPlayId = 0; this.currentImageBlobUrl = null;
        this.deckTitleMap = null;
    }

    _getInitialHTML() {
        const mobileClass = this.isMobile ? 'mobile' : '';
        return `
        <div class="immersion-header ${mobileClass}" style="display: flex; justify-content: space-between; align-items: center; padding: ${this.isMobile ? '10px 12px' : '8px 12px'}; background-color: #1e293b; border-bottom: 1px solid #334155; border-radius: 8px 8px 0 0;">
            <span class="immersion-title" style="color: #e2e8f0; font-weight: 600; font-size: ${this.isMobile ? '1.2em' : '1.4em'}; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; flex-grow: 1; margin-right: 8px;">Immersion Kit</span>
            <div style="display: flex; gap: ${this.isMobile ? '8px' : '6px'}; align-items: center; flex-shrink: 0;">
                <button data-action="random-word" class="ik-btn-random" title="Random Word (Ctrl/Cmd + R)">🎲</button>
                <button data-action="reset-pos" class="ik-btn-reset" title="Reset position">📍</button>
                <button data-action="toggle-fullscreen" class="ik-btn" title="Enter Full Screen">↗️</button>
                <button data-action="toggle-size" class="ik-btn" title="Switch to large view">📏</button>
            </div>
        </div>
        <div class="immersion-content-wrapper" style="position: relative; border-radius: 0 0 8px 8px; background-color: #1e293b; overflow: hidden;">
            <div class="immersion-state-overlay" style="display: flex; justify-content: center; align-items: center; padding: ${this.isMobile ? '30px 15px' : '40px 20px'}; text-align: center;">
                <p class="immersion-state-message" style="color: #94a3b8; font-size: ${this.isMobile ? '1em' : '1.1em'};"></p>
            </div>
            <div class="immersion-example-content" style="display: none;">
                <div class="image-container" style="position: relative; margin-bottom: 12px; text-align: center;">
                    <img data-action="play-audio" class="example-image" alt="Example" style="max-width: 100%; cursor: pointer; border-radius: 6px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2); transition: transform 0.2s ease;">
                    <button data-action="play-audio" class="ik-btn-overlay" title="Play Audio (Spacebar)">🔊</button>
                </div>
                <p class="example-sentence"></p>
                <p class="example-translation"></p>
            </div>
        </div>
        <div class="immersion-nav-wrapper">
            <div class="regular-nav" style="display: none; justify-content: space-between; align-items: center; padding: ${this.isMobile ? '15px 12px' : '12px'}; border-top: 1px solid #334155;">
                <span class="example-counter" style="color: #94a3b8; font-weight: 500; font-size: ${this.isMobile ? '0.9em' : '1em'};"></span>
                <div style="display: flex; gap: ${this.isMobile ? '10px' : '6px'}; align-items: center;">
                    <button data-action="prev-example" class="ik-btn" title="Previous (←)">←</button>
                    <button data-action="next-example" class="ik-btn" title="Next (→)">→</button>
                    <button data-action="toggle-loop" class="ik-btn" title="Loop current audio">🔁</button>
                    <button data-action="play-all" class="ik-btn" title="Play all examples">▶️</button>
                </div>
            </div>
        </div>`;
    }

    _cacheElements() {
        const selectors = { title: '.immersion-title', contentWrapper: '.immersion-content-wrapper', stateOverlay: '.immersion-state-overlay', stateMessage: '.immersion-state-message', exampleContent: '.immersion-example-content', image: '.example-image', sentence: '.example-sentence', translation: '.example-translation', navWrapper: '.immersion-nav-wrapper', regularNav: '.regular-nav', counter: '.example-counter', playAllBtn: '[data-action="play-all"]', loopBtn: '[data-action="toggle-loop"]', toggleSizeBtn: '[data-action="toggle-size"]', fullscreenBtn: '[data-action="toggle-fullscreen"]', randomWordBtn: '[data-action="random-word"]' };
        for (const key in selectors) { this.elements[key] = this.container.querySelector(selectors[key]); }
    }

    createContainer() {
        if (this.container) return;
        this.container = document.createElement('div');
        this.container.id = 'anki-immersion-container';
        this.container.innerHTML = this._getInitialHTML();
        this.container.classList.add('no-parse'); // For Yomitan etc.
        document.body.appendChild(this.container);
        this._cacheElements();
        this._addEventListeners();
        this.dragHandler = new TouchDragHandler(this.container, this.container.querySelector('.immersion-header'));
        this._updateContainerStateClasses();
    }

    _addEventListeners() {
        this.container.addEventListener('click', (e) => {
            const actionTarget = e.target.closest('[data-action]');
            if (!actionTarget) return;
            const action = actionTarget.dataset.action;
            const actionMap = {
                'toggle-size': () => this.toggleSize(),
                'toggle-fullscreen': () => this.toggleFullScreen(),
                'reset-pos': () => this.dragHandler.resetPosition(),
                'play-audio': () => this.playCurrentAudio(),
                'prev-example': () => this.navigate(-1),
                'next-example': () => this.navigate(1),
                'toggle-loop': () => this.toggleLoop(),
                'play-all': () => this.handlePlayAll(),
                'random-word': () => this.fetchRandomWord(),
            };
            if (actionMap[action]) actionMap[action]();
        });

        if (this.isMobile) {
            let startX = 0, startY = 0;
            this.container.addEventListener('touchstart', (e) => { if (e.target.closest('.immersion-header, button')) return; startX = e.touches[0].clientX; startY = e.touches[0].clientY; }, { passive: true });
            this.container.addEventListener('touchend', (e) => {
                if (e.target.closest('.immersion-header, button')) return;
                const deltaX = e.changedTouches[0].clientX - startX;
                const deltaY = e.changedTouches[0].clientY - startY;
                if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 50) {
                    if (deltaX > 0) this.navigate(-1); else this.navigate(1);
                }
            }, { passive: true });
        }

        if (!this.isMobile) {
            document.addEventListener('keydown', (e) => {
                if (!this.container?.parentNode || document.activeElement.tagName.match(/INPUT|TEXTAREA|DIV/i)) return;
                const keyActions = {
                    'ArrowLeft': () => this.showNavControls && this.elements.regularNav.style.display !== 'none' && this.navigate(-1),
                    'ArrowRight': () => this.showNavControls && this.elements.regularNav.style.display !== 'none' && this.navigate(1),
                    ' ': () => e.target === document.body && this.playCurrentAudio(),
                };
                if (keyActions[e.key]) { e.preventDefault(); keyActions[e.key](); }
                if ((e.key.toLowerCase() === 'r') && (e.ctrlKey || e.metaKey)) { e.preventDefault(); this.fetchRandomWord(); }
            });
        }
    }

    _setLoadingState(isLoading, message = '') {
        this.elements.stateMessage.textContent = message;
        this.elements.stateOverlay.style.display = isLoading ? 'flex' : 'none';
        this.elements.exampleContent.style.display = isLoading ? 'none' : 'flex';
        if (message && !isLoading) {
            this.elements.exampleContent.style.display = 'none';
            this.elements.stateOverlay.style.display = 'flex';
        }
        this._updateNavVisibility();
    }

    _updateContent() {
        if (this.examples.length === 0) return;
        const example = this.examples[this.currentIndex];
        this._loadImage(example.full_image_url);
        setTextContent(this.elements.sentence, example.sentence || '');
        setTextContent(this.elements.translation, example.translation || '');
        this._updateCounter();
    }

    _updateCounter() { this.elements.counter.textContent = `${this.currentIndex + 1}/${this.examples.length}`; }
    _updateNavVisibility() { const hasExamples = this.examples.length > 0; this.elements.regularNav.style.display = (this.showNavControls && hasExamples) ? 'flex' : 'none'; this.elements.navWrapper.style.display = (this.elements.regularNav.style.display !== 'none') ? 'block' : 'none'; }
    _updateContainerStateClasses() {
        this.container.classList.toggle('is-large', this.isLargeSize && !this.isFullScreen);
        this.container.classList.toggle('is-fullscreen', this.isFullScreen);
        this.container.classList.toggle('is-mobile', this.isMobile);
        this.dragHandler.enabled = !this.isFullScreen;
        this.elements.toggleSizeBtn.textContent = this.isLargeSize ? '🔍' : '📏';
        this.elements.fullscreenBtn.textContent = this.isFullScreen ? '↙️' : '↗️';
    }

    toggleSize() { if (this.isFullScreen) this.isFullScreen = false; this.isLargeSize = !this.isLargeSize; this._updateContainerStateClasses(); }
    toggleFullScreen() { this.isFullScreen = !this.isFullScreen; if (this.isFullScreen) this.dragHandler.resetPosition(); this._updateContainerStateClasses(); }

    navigate(direction) {
        if (this.examples.length === 0) return;
        this.stopCurrentAudio(); this.toggleLoop(false);
        this.currentIndex = (this.currentIndex + direction + this.examples.length) % this.examples.length;
        this._updateContent();
        const example = this.examples[this.currentIndex];
        if (example?.full_sound_url) setTimeout(() => this.playAudio(example.full_sound_url), 100);
    }

    fetchRandomWord() {
        const randomWord = getRandomWord();
        if (!randomWord) { this.createContainer(); this._setLoadingState(true, 'Random word list is empty. Add words to the script.'); return; }
        this.elements.randomWordBtn.style.transform = 'scale(0.9)';
        setTimeout(() => { if (this.elements.randomWordBtn) this.elements.randomWordBtn.style.transform = ''; }, 150);
        this.fetchExamples(randomWord);
    }

    async _ensureMetadata() {
        if (this.deckTitleMap) return; // Already fetched or failed, don't retry in the same session
        console.log("Fetching Immersion Kit metadata...");
        try {
            const response = await new Promise((resolve, reject) => {
                GM_xmlhttpRequest({
                    method: "GET", url: "https://apiv2.immersionkit.com/index_meta",
                    onload: (res) => (res.status === 200) ? resolve(res) : reject(new Error(`Meta fetch failed: ${res.status}`)),
                    onerror: (err) => reject(new Error(`Meta fetch network error: ${err}`))
                });
            });
            this.deckTitleMap = JSON.parse(response.responseText).data;
            console.log("Metadata fetched successfully.");
        } catch (error) {
            console.error("Could not fetch Immersion Kit metadata:", error);
            this.deckTitleMap = {}; // Set to empty object to prevent refetching on failure
        }
    }

    async fetchExamples(word) {
        const originalWordForDisplay = word;
        const sanitizedWord = word.replace(/[^\p{Script=Hiragana}\p{Script=Katakana}\p{Script=Han}\s]/gu, '');
        if (this.lastKeyword === sanitizedWord && this.examples.length > 0) { if (this.elements.title.textContent !== originalWordForDisplay) setTextContent(this.elements.title, originalWordForDisplay); return; }
        this.createContainer();
        this.lastKeyword = sanitizedWord;
        setTextContent(this.elements.title, originalWordForDisplay); this.elements.title.title = originalWordForDisplay;
        this.stopCurrentAudio(); this.toggleLoop(false);
        if (!sanitizedWord) { this.examples = []; this._setLoadingState(true, 'Invalid keyword (non-Japanese)'); return; }

        try {
            await this._ensureMetadata();
            this._setLoadingState(true, 'Loading examples...');
            const url = `https://apiv2.immersionkit.com/search?q=${encodeURIComponent(sanitizedWord)}&exactMatch=false&limit=50&sort=sentence_length:asc`;

            const response = await new Promise((resolve, reject) => {
                GM_xmlhttpRequest({
                    method: "GET", url: url,
                    onload: (res) => (res.status >= 200 && res.status < 400) ? resolve(res) : reject(new Error(`HTTP error! status: ${res.status}`)),
                    onerror: (res) => reject(new Error("Network error during request.")),
                    ontimeout: () => reject(new Error("Request timed out."))
                });
            });

            const data = JSON.parse(response.responseText);
            const rawExamples = data.examples || [];
            const linodeBaseUrl = 'https://us-southeast-1.linodeobjects.com/immersionkit/media/';
            this.examples = rawExamples.map(ex => {
                const slug = ex.title || '';
                const prettyTitle = this.deckTitleMap?.[slug]?.title || slug;
                const mediaType = ex.id ? ex.id.split('_')[0] : '';
                const fullImageUrl = ex.image && mediaType && prettyTitle ? `${linodeBaseUrl}${mediaType}/${prettyTitle}/media/${ex.image}` : '';
                const fullSoundUrl = ex.sound && mediaType && prettyTitle ? `${linodeBaseUrl}${mediaType}/${prettyTitle}/media/${ex.sound}` : '';
                return { ...ex, full_image_url: fullImageUrl, full_sound_url: fullSoundUrl };
            });

            if (this.examples.length > 0) {
                this.currentIndex = 0; this._setLoadingState(false); this._updateContent();
                const example = this.examples[this.currentIndex];
                if (example?.full_sound_url) setTimeout(() => this.playAudio(example.full_sound_url), 150);
            } else {
                this._setLoadingState(true, 'No examples found');
            }
        } catch (error) { console.error("Fetch error:", error); this._setLoadingState(true, `Failed to fetch: ${error.message}`); }
    }

    _loadImage(url) {
        if (this.currentImageBlobUrl) {
            URL.revokeObjectURL(this.currentImageBlobUrl);
            this.currentImageBlobUrl = null;
        }
        if (!url) { this.elements.image.src = ''; return; }
        GM_xmlhttpRequest({
            method: 'GET', url: url, responseType: 'blob',
            headers: { 'Referer': 'https://jpdb.io/', 'Origin': 'https://jpdb.io/' },
            onload: (response) => {
                if (response.status === 200) {
                    const objectURL = URL.createObjectURL(response.response);
                    this.currentImageBlobUrl = objectURL;
                    this.elements.image.src = objectURL;
                } else {
                    console.error(`Failed to load image: ${url}, status: ${response.status}`);
                    this.elements.image.src = '';
                }
            },
            onerror: (err) => { console.error(`GM_xmlhttpRequest failed for image ${url}:`, err); this.elements.image.src = ''; }
        });
    }

    playCurrentAudio() { this.toggleLoop(false); if (this.examples.length > 0) this.playAudio(this.examples[this.currentIndex].full_sound_url); }
    stopCurrentAudio() { if (this.currentAudioSource) { try { this.currentAudioSource.onended = null; this.currentAudioSource.stop(0); } catch (e) {} this.currentAudioSource = null; }}

    playAudio(url) {
        return new Promise((resolve, reject) => {
            if (!url) return resolve();
            const playId = ++this.lastPlayId;
            this.stopCurrentAudio();
            if (this.audioContext.state === 'suspended') this.audioContext.resume().catch(console.error);
            GM_xmlhttpRequest({
                method: 'GET', url: url, responseType: 'arraybuffer',
                headers: { 'Referer': 'https://jpdb.io/', 'Origin': 'https://jpdb.io/' },
                onload: (response) => {
                    if (playId !== this.lastPlayId) return resolve();
                    if (response.status !== 200) {
                         console.error(`Failed to load audio: ${url}, status: ${response.status}`);
                         return reject(new Error(`HTTP status ${response.status}`));
                    }
                    this.audioContext.decodeAudioData(response.response,
                        (buffer) => {
                            if (playId !== this.lastPlayId) return resolve();
                            const source = this.audioContext.createBufferSource();
                            source.buffer = buffer; source.connect(this.audioContext.destination); source.start(0);
                            source.onended = () => { if (this.currentAudioSource === source) this.currentAudioSource = null; resolve(); };
                            this.currentAudioSource = source;
                        },
                        (err) => { console.error(`decodeAudioData failed for URL: ${url}`, err); reject(err); }
                    );
                },
                onerror: (err) => { console.error(`GM_xmlhttpRequest failed for ${url}:`, err); reject(err); }
            });
        });
    }

    toggleLoop(forceState) {
        const newState = (forceState !== undefined) ? forceState : !this.isLoopingAudio;
        if (newState === this.isLoopingAudio) return;
        this.isLoopingAudio = newState;
        if (this.isLoopingAudio) { if (this.isPlayingAll) this.handlePlayAll(false); this.audioLoop(); }
        else { this.stopCurrentAudio(); }
        this.elements.loopBtn.classList.toggle('is-active', this.isLoopingAudio);
    }
    async audioLoop() {
        if (!this.isLoopingAudio || !this.container?.parentNode) { this.toggleLoop(false); return; }
        const example = this.examples.length > 0 ? this.examples[this.currentIndex] : null;
        if (example?.full_sound_url) {
            await this.playAudio(example.full_sound_url);
            if (this.isLoopingAudio) setTimeout(() => this.audioLoop(), 100);
        } else { this.toggleLoop(false); }
    }
    handlePlayAll(forceState) {
        this.isPlayingAll = (forceState !== undefined) ? forceState : !this.isPlayingAll;
        if (this.isPlayingAll) { this.toggleLoop(false); this.playAllSequence(); }
        else { this.stopCurrentAudio(); }
        this.elements.playAllBtn.textContent = this.isPlayingAll ? '⏹️' : '▶️';
    }
    async playAllSequence() {
        if (this.examples.length === 0) { this.handlePlayAll(false); return; }
        let playedCount = 0;
        while (this.isPlayingAll && playedCount < this.examples.length && this.container?.parentNode) {
            this._updateContent();
            const example = this.examples[this.currentIndex];
            if (example?.full_sound_url) {
                await this.playAudio(example.full_sound_url);
                if (!this.isPlayingAll) break;
                await new Promise(res => setTimeout(res, 300));
            }
            if (!this.isPlayingAll) break;
            this.currentIndex = (this.currentIndex + 1) % this.examples.length;
            playedCount++;
        }
        this.handlePlayAll(false);
    }
}

// =================================================================================
// SCRIPT INITIALIZATION
// =================================================================================

function getEmbedKeyword() {
    const selectors = ['.keyword-field', '[data-keyword]', '#keyword', '.expression', '.vocab-term', '.jp', '.japanese_word'];
    for (const selector of selectors) {
        const element = document.querySelector(selector);
        if (element) { let keyword = element.dataset.keyword || element.textContent || element.innerText; if (keyword) return keyword.trim().split(/[\s（(]/)[0]; }
    }
    const embed = document.querySelector('embed[src*="keyword="]');
    if (embed?.src) { try { const url = new URL(embed.src); return url.searchParams.get('keyword')?.trim() || null; } catch (e) {} }
    return null;
}

const immersionHandler = new ImmersionKitHandler();

function setupObservers() {
    let lastProcessedKeyword = null;
    const updateHandler = debounce(() => {
        const currentKeyword = getEmbedKeyword();
        if (currentKeyword && currentKeyword !== lastProcessedKeyword) {
            lastProcessedKeyword = currentKeyword;
            immersionHandler.fetchExamples(currentKeyword);
        } else if (!currentKeyword && lastProcessedKeyword !== null) {
            lastProcessedKeyword = null;
            if (immersionHandler.container?.parentNode) {
                immersionHandler.examples = []; immersionHandler.stopCurrentAudio(); immersionHandler.toggleLoop(false);
                immersionHandler._setLoadingState(true, "No keyword found on current card.");
                immersionHandler.elements.title.textContent = "Immersion Kit";
            }
        }
    }, 200);
    updateHandler();
    const observer = new MutationObserver(updateHandler);
    observer.observe(document.getElementById('qa') || document.body, { childList: true, subtree: true });
}

function injectStyles() {
    const style = document.createElement('style');
    style.textContent = `
        @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;500;700&display=swap');
        .no-parse { -yomitan-no-parse: true; }
        #anki-immersion-container { position: fixed; bottom: 100px; right: 20px; width: 450px; max-width: 85vw; max-height: 600px; z-index: 10000; background-color: #0f172a; border: 1px solid #334155; border-radius: 9px; box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3); backdrop-filter: blur(10px); display: flex; flex-direction: column; overflow: hidden; }
        @media (max-width: 768px) { #anki-immersion-container { width: 95vw; max-width: 95vw; bottom: 10px; right: 2.5vw; left: 2.5vw; max-height: 70vh; } #anki-immersion-container.is-large { width: 98vw; max-width: 98vw; right: 1vw; left: 1vw; bottom: 5px; max-height: 85vh; } #anki-immersion-container.is-fullscreen { width: 100vw; height: 100vh; max-height: 100vh; top: 0; left: 0; right: 0; bottom: 0; transform: none; border-radius: 0; } }
        .immersion-content-wrapper { flex-grow: 1; overflow-y: auto; }
        .immersion-example-content { display: none; flex-direction: column; padding: 12px; }
        #anki-immersion-container.is-large { width: 800px; max-width: 90vw; max-height: 85vh; bottom: 20px; right: 20px; }
        #anki-immersion-container.is-fullscreen { width: 95vw; height: 95vh; max-height: 95vh; top: 50%; left: 50%; right: auto; bottom: auto; transform: translate(-50%, -50%); }
        .immersion-kit-dragging, .immersion-kit-dragging * { user-select: none !important; }
        #anki-immersion-container.is-dragging { transition: none !important; transform: scale(1.02); box-shadow: 0 12px 35px rgba(0, 0, 0, 0.4); z-index: 10001; }
        .example-sentence, .example-translation { text-rendering: optimizeLegibility; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; }
        .example-sentence { font-size: 1.4em; line-height: 1.35; margin: 0 0 10px; word-wrap: break-word; text-align: center; color: #e2e8f0; font-family: 'Noto Sans JP', sans-serif; }
        .example-translation { color: #94a3b8; font-size: 0.95em; line-height: 1.35; margin: 0 0 10px; text-align: center; font-style: italic; }
        .example-image { max-height: 200px; }
        @media (max-width: 768px) { .example-sentence { font-size: 1.2em; line-height: 1.4; margin-bottom: 12px; } .example-translation { font-size: 0.9em; margin-bottom: 12px; } .example-image { max-height: 150px; } }
        .is-large .example-sentence { font-size: 1.8em; } .is-large .example-translation { font-size: 1.15em; } .is-large .example-image { max-height: 400px; }
        @media (max-width: 768px) { .is-large .example-sentence { font-size: 1.5em; } .is-large .example-translation { font-size: 1em; } .is-large .example-image { max-height: 250px; } }
        .is-fullscreen .example-sentence { font-size: 2.5em; } .is-fullscreen .example-translation { font-size: 1.5em; } .is-fullscreen .example-image { max-height: 50vh; }
        @media (max-width: 768px) { .is-fullscreen .example-sentence { font-size: 1.8em; } .is-fullscreen .example-translation { font-size: 1.1em; } .is-fullscreen .example-image { max-height: 40vh; } }
        .ik-btn, .ik-btn-reset, .ik-btn-random { background-color: #334155; color: #e2e8f0; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; font-size: 0.9em; transition: all 0.2s ease; min-width: 32px; min-height: 32px; display: flex; align-items: center; justify-content: center; }
        .ik-btn-random { background-color: #7c3aed; } .ik-btn-random:hover { background-color: #8b5cf6; } .ik-btn-random:active { transform: scale(0.95); }
        @media (max-width: 768px) { .ik-btn, .ik-btn-reset, .ik-btn-random { padding: 8px 12px; font-size: 1em; min-width: 40px; min-height: 40px; } }
        .ik-btn:hover { background-color: #475569; } .ik-btn-reset { background-color: #374151; opacity: 0.8; } .ik-btn-reset:hover { background-color: #4b5563; opacity: 1; }
        .ik-btn-overlay { position: absolute; bottom: 8px; right: 8px; background-color: rgba(51, 65, 85, 0.9); backdrop-filter: blur(5px); color: #e2e8f0; border: none; padding: 8px 12px; border-radius: 4px; cursor: pointer; transition: all 0.2s ease; min-width: 36px; min-height: 36px; display: flex; align-items: center; justify-content: center; }
        @media (max-width: 768px) { .ik-btn-overlay { padding: 10px 14px; min-width: 44px; min-height: 44px; bottom: 10px; right: 10px; } }
        .ik-btn-overlay:hover { background-color: rgba(71, 85, 105, 0.95); } .ik-btn.is-active { background-color: #16a34a; } .ik-btn.is-active:hover { background-color: #15803d; }
    `;
    document.head.appendChild(style);
}

function onReady(fn) { (document.readyState === 'complete' || document.readyState === 'interactive') ? setTimeout(fn, 1) : document.addEventListener('DOMContentLoaded', fn); }
window.addEventListener('resize', debounce(() => { if (immersionHandler.container) { immersionHandler.isMobile = isMobile(); immersionHandler._updateContainerStateClasses(); if (immersionHandler.isMobile && immersionHandler.dragHandler) immersionHandler.dragHandler.resetPosition(); } }, 250));

onReady(() => {
    injectStyles();
    setupObservers();
});

})();